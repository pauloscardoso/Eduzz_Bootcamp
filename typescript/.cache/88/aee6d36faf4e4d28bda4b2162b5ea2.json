{"id":"index.ts","dependencies":[{"name":"D:\\Code\\Dio\\Eduzz\\typescript\\tsconfig.json","includedInParent":true,"mtime":1631648676236},{"name":"D:\\Code\\Dio\\Eduzz\\typescript\\package.json","includedInParent":true,"mtime":1631648511998},{"name":"jquery","loc":{"line":123,"column":14},"parent":"D:\\Code\\Dio\\Eduzz\\typescript\\index.ts","resolved":"D:\\Code\\Dio\\Eduzz\\typescript\\node_modules\\jquery\\dist\\jquery.js"}],"generated":{"js":"\"use strict\";\n\nvar _jquery = _interopRequireDefault(require(\"jquery\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/* function sum(a: number , b: number) {\r\n    return a + b;\r\n} */\n// ### Interfaces - usadas para definir contratos de estruturas de dados e contratos de classe\n\n/* interface IAnimal {\r\n    nome: string;\r\n    tipo: 'terreste' | 'aquático';\r\n    executarRugido(alturaEmDecibeis: number): void;\r\n}\r\n\r\ntype IAnimal = {\r\n    nome: string;\r\n    tipo: 'terreste' | 'aquático';\r\n    executarRugido(alturaEmDecibeis: number): void;\r\n}\r\n\r\n\r\ninterface IFelino extends IAnimal {\r\n    visaoNoturna: boolean;\r\n}\r\n\r\nconst animal: IAnimal = {\r\n    nome: 'Elefante',\r\n    tipo: 'terreste',\r\n    executarRugido: (alturaEmDecibeis) => (`${alturaEmDecibeis}`)\r\n}\r\n*/\n\n/* interface IAnimal {\r\n    nome: string,\r\n    tipo: 'terreste' | 'aquático',\r\n    domestico: boolean;\r\n}\r\n\r\ninterface IFelino extends IAnimal {\r\n    visaoNoturna: boolean;\r\n}\r\n\r\ninterface ICanino extends IAnimal {\r\n    porte: 'pequeno' | 'medio' | 'grande';\r\n}\r\n\r\ntype IDomestico = IFelino | ICanino;\r\n\r\nconst animal: IDomestico = {\r\n    domestico: true,\r\n    nome: 'cachorro',\r\n    porte: 'medio',\r\n    tipo: 'terreste',\r\n    visaoNoturna: true\r\n} */\n// ### Types - para fazer junções, mergers, pipe, etc.\n\n/* const input = document.getElementById('input') as HTMLInputElement;\r\n\r\ninput. addEventListener('input', (event) => {\r\n    const i = event.currentTarget as HTMLInputElement;\r\n\r\n    console.log(i.value)\r\n})\r\n\r\n\r\n// ### Gererics types\r\n\r\nfunction adicionarLista<NaoSei>(array: any[], valor: NaoSei) {\r\n    return array.map(() => valor);\r\n}\r\n\r\nadicionarLista([1, 2, 3], 1) */\n// ### Condicionais a partir de parâmetros\n\n/* interface IUsuario {\r\n    id: string;\r\n    email: string;\r\n}\r\n\r\ninterface IAdmin extends IUsuario {\r\n    cargo: 'gerente' | 'coordenador' | 'supervisor';\r\n}\r\n\r\nfunction redirecione(usuario: IUsuario | IAdmin) {\r\n    if ('cargo' in usuario){\r\n        // redirecionar para a área de adminsitração\r\n    }else{\r\n        // redirecionar para a área de usuário\r\n    }\r\n} */\n// ### Utilizando o caracter \"?\" para variáveis opcionais\n\n/* interface IUsuario {\r\n    id: string;\r\n    email: string;\r\n    cargo?: 'funcionario' | 'coordenador' | 'supervisor' | 'gerente'; // cargo se torna um dado OPCIONAL\r\n}\r\n\r\nfunction redirecione(usuario: IUsuario) {\r\n    if(usuario.cargo) {\r\n        // redirecionar(usuario.cargo)\r\n    }else{\r\n        // redirecionar para a área de usuário\r\n    }\r\n}\r\n*/\n// ### CRIANDO VARIÁVEIS COM PROPRIEDADE READONLY E PRIVATE\n\n/* interface Cachorro {\r\n    nome: string;\r\n    idade: number;\r\n    parqueFavorito?: string;\r\n}\r\n\r\ntype CachorroSomenteLeitura = {\r\n    readonly [K in keyof Cachorro]-?: Cachorro[K];\r\n}\r\n\r\nclass MeuCachorro implements Cachorro {\r\n    idade;\r\n    nome;\r\n    parqueFavorito: any;\r\n\r\n    constructor(nome: any, idade: number) {\r\n        this.nome = nome;\r\n        this.idade = idade;\r\n    }\r\n}\r\n\r\nconst cao = new MeuCachorro('Apolo', 14) */\n_jquery.default.fn.extend({\n  novaFuncao: function novaFuncao() {\n    console.log('Chamou nova funcao');\n  }\n});\n\n(0, _jquery.default)('body').novaFuncao();"},"sourceMaps":{"js":{"mappings":[{"source":"index.ts","name":null,"original":{"line":141,"column":0},"generated":{"line":3,"column":0}},{"source":"index.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":7,"column":0}},{"source":"index.ts","name":null,"original":{"line":7,"column":0},"generated":{"line":10,"column":0}},{"source":"index.ts","name":null,"original":{"line":9,"column":0},"generated":{"line":12,"column":0}},{"source":"index.ts","name":null,"original":{"line":33,"column":0},"generated":{"line":36,"column":0}},{"source":"index.ts","name":null,"original":{"line":58,"column":0},"generated":{"line":59,"column":0}},{"source":"index.ts","name":null,"original":{"line":60,"column":0},"generated":{"line":61,"column":0}},{"source":"index.ts","name":null,"original":{"line":78,"column":0},"generated":{"line":77,"column":0}},{"source":"index.ts","name":null,"original":{"line":80,"column":0},"generated":{"line":79,"column":0}},{"source":"index.ts","name":null,"original":{"line":98,"column":0},"generated":{"line":95,"column":0}},{"source":"index.ts","name":null,"original":{"line":100,"column":0},"generated":{"line":97,"column":0}},{"source":"index.ts","name":null,"original":{"line":115,"column":0},"generated":{"line":111,"column":0}},{"source":"index.ts","name":null,"original":{"line":117,"column":0},"generated":{"line":113,"column":0}},{"source":"index.ts","name":null,"original":{"line":143,"column":0},"generated":{"line":135,"column":0}},{"source":"index.ts","name":null,"original":{"line":143,"column":2},"generated":{"line":135,"column":16}},{"source":"index.ts","name":null,"original":{"line":143,"column":0},"generated":{"line":135,"column":18}},{"source":"index.ts","name":null,"original":{"line":143,"column":5},"generated":{"line":135,"column":19}},{"source":"index.ts","name":null,"original":{"line":143,"column":0},"generated":{"line":135,"column":25}},{"source":"index.ts","name":null,"original":{"line":143,"column":12},"generated":{"line":135,"column":26}},{"source":"index.ts","name":null,"original":{"line":144,"column":4},"generated":{"line":136,"column":0}},{"source":"index.ts","name":null,"original":{"line":144,"column":4},"generated":{"line":136,"column":2}},{"source":"index.ts","name":null,"original":{"line":143,"column":12},"generated":{"line":136,"column":12}},{"source":"index.ts","name":null,"original":{"line":144,"column":14},"generated":{"line":136,"column":36}},{"source":"index.ts","name":null,"original":{"line":145,"column":8},"generated":{"line":137,"column":0}},{"source":"index.ts","name":null,"original":{"line":145,"column":8},"generated":{"line":137,"column":4}},{"source":"index.ts","name":null,"original":{"line":145,"column":15},"generated":{"line":137,"column":11}},{"source":"index.ts","name":null,"original":{"line":145,"column":16},"generated":{"line":137,"column":12}},{"source":"index.ts","name":null,"original":{"line":145,"column":8},"generated":{"line":137,"column":15}},{"source":"index.ts","name":null,"original":{"line":145,"column":20},"generated":{"line":137,"column":16}},{"source":"index.ts","name":null,"original":{"line":145,"column":8},"generated":{"line":137,"column":36}},{"source":"index.ts","name":null,"original":{"line":146,"column":5},"generated":{"line":138,"column":0}},{"source":"index.ts","name":null,"original":{"line":143,"column":12},"generated":{"line":139,"column":0}},{"source":"index.ts","name":null,"original":{"line":143,"column":0},"generated":{"line":139,"column":1}},{"source":"index.ts","name":null,"original":{"line":149,"column":0},"generated":{"line":141,"column":0}},{"source":"index.ts","name":null,"original":{"line":149,"column":2},"generated":{"line":141,"column":21}},{"source":"index.ts","name":null,"original":{"line":149,"column":0},"generated":{"line":141,"column":27}},{"source":"index.ts","name":null,"original":{"line":149,"column":10},"generated":{"line":141,"column":29}},{"source":"index.ts","name":null,"original":{"line":149,"column":0},"generated":{"line":141,"column":39}}],"sources":{"index.ts":"/* function sum(a: number , b: number) {\r\n    return a + b;\r\n} */\r\n\r\n\r\n\r\n// ### Interfaces - usadas para definir contratos de estruturas de dados e contratos de classe\r\n\r\n/* interface IAnimal {\r\n    nome: string;\r\n    tipo: 'terreste' | 'aquático';\r\n    executarRugido(alturaEmDecibeis: number): void;\r\n} \r\n\r\ntype IAnimal = {\r\n    nome: string;\r\n    tipo: 'terreste' | 'aquático';\r\n    executarRugido(alturaEmDecibeis: number): void;\r\n}\r\n\r\n\r\ninterface IFelino extends IAnimal {\r\n    visaoNoturna: boolean;\r\n}\r\n\r\nconst animal: IAnimal = {\r\n    nome: 'Elefante',\r\n    tipo: 'terreste',\r\n    executarRugido: (alturaEmDecibeis) => (`${alturaEmDecibeis}`)\r\n}\r\n*/\r\n\r\n/* interface IAnimal {\r\n    nome: string,\r\n    tipo: 'terreste' | 'aquático',\r\n    domestico: boolean;\r\n}\r\n\r\ninterface IFelino extends IAnimal {\r\n    visaoNoturna: boolean;\r\n}\r\n\r\ninterface ICanino extends IAnimal {\r\n    porte: 'pequeno' | 'medio' | 'grande';\r\n}\r\n\r\ntype IDomestico = IFelino | ICanino;\r\n\r\nconst animal: IDomestico = {\r\n    domestico: true,\r\n    nome: 'cachorro',\r\n    porte: 'medio',\r\n    tipo: 'terreste',\r\n    visaoNoturna: true\r\n} */\r\n\r\n\r\n// ### Types - para fazer junções, mergers, pipe, etc.\r\n\r\n/* const input = document.getElementById('input') as HTMLInputElement;\r\n\r\ninput. addEventListener('input', (event) => {\r\n    const i = event.currentTarget as HTMLInputElement;\r\n\r\n    console.log(i.value)\r\n})\r\n\r\n\r\n// ### Gererics types\r\n\r\nfunction adicionarLista<NaoSei>(array: any[], valor: NaoSei) {\r\n    return array.map(() => valor);\r\n}\r\n\r\nadicionarLista([1, 2, 3], 1) */\r\n\r\n\r\n// ### Condicionais a partir de parâmetros\r\n\r\n/* interface IUsuario {\r\n    id: string; \r\n    email: string;\r\n}\r\n\r\ninterface IAdmin extends IUsuario {\r\n    cargo: 'gerente' | 'coordenador' | 'supervisor';\r\n}\r\n\r\nfunction redirecione(usuario: IUsuario | IAdmin) {\r\n    if ('cargo' in usuario){\r\n        // redirecionar para a área de adminsitração\r\n    }else{\r\n        // redirecionar para a área de usuário\r\n    }\r\n} */   \r\n\r\n\r\n// ### Utilizando o caracter \"?\" para variáveis opcionais\r\n\r\n/* interface IUsuario {\r\n    id: string; \r\n    email: string;\r\n    cargo?: 'funcionario' | 'coordenador' | 'supervisor' | 'gerente'; // cargo se torna um dado OPCIONAL\r\n}\r\n\r\nfunction redirecione(usuario: IUsuario) {\r\n    if(usuario.cargo) {\r\n        // redirecionar(usuario.cargo)\r\n    }else{\r\n        // redirecionar para a área de usuário\r\n    }\r\n} \r\n*/\r\n\r\n// ### CRIANDO VARIÁVEIS COM PROPRIEDADE READONLY E PRIVATE\r\n\r\n/* interface Cachorro {\r\n    nome: string;\r\n    idade: number;\r\n    parqueFavorito?: string;\r\n}\r\n\r\ntype CachorroSomenteLeitura = {\r\n    readonly [K in keyof Cachorro]-?: Cachorro[K];\r\n}\r\n\r\nclass MeuCachorro implements Cachorro {\r\n    idade;\r\n    nome;\r\n    parqueFavorito: any;\r\n\r\n    constructor(nome: any, idade: number) {\r\n        this.nome = nome;\r\n        this.idade = idade;\r\n    }\r\n}\r\n\r\nconst cao = new MeuCachorro('Apolo', 14) */\r\n\r\n\r\nimport $ from 'jquery';\r\n\r\n$.fn.extend({\r\n    novaFuncao() {\r\n        console.log('Chamou nova funcao');        \r\n    }\r\n});\r\n\r\n$('body').novaFuncao    ();"},"lineCount":null}},"error":null,"hash":"495e00cfeba428138e400537402c8fa6","cacheData":{"env":{}}}